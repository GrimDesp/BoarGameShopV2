@implements IDisposable
<div class="row justify-content-center  text-center">
    <div class="col-12">
        <p class="m-1">
            @if (IsChanged)
            {
                <span class=" bi bi-circle-fill text-success"></span>
            }
            Ціна
            @if (IsChanged)
            {
                <button class="mx-1 @Disabled btn btn-primary" @onclick="ResetCallback">Відмінити</button>
            }
            else
            {
                <button class="mx-1 disabled btn btn-primary">Відмінити</button>
            }
        </p>
    </div>
    <div class="col-3 border-2 border-start   ">
        <div class="m-0 row justify-content-center">
            <span class="col-12">Повна ціна</span>
            <input class=" col-6 form-text" type="number" @bind="@FullPrice" />

        </div>
    </div>
    <div class="col-3 border-2 border-start ">
        <span >Скидка</span>
        <div class="m-0 row justify-content-center">
            <input class=" col-4 form-text" type="number" @bind="@Discount" />
        </div>
    </div>
    <div class="col-3 border-2 border-start align-content-center ">
        <span>Ціна зі скидкою</span>
        <p class="m-1">@(Discount != null ? (FullPrice * (1 - (Discount / (decimal)100))).ToString() : "-") </p>
    </div>
</div>
@code{
    private decimal fullPrice;
    private byte? discount;
    [Parameter]
    public bool IsChanged { get; set; }
    [Parameter]
    public string Disabled { get; set; } = string.Empty;
    [Parameter]
    public decimal FullPrice { get => fullPrice; 
        set
        {
            if (value < 0)
                return;
            if (value == fullPrice)
                return;
            Console.WriteLine(value);
            fullPrice = value;
            OnParameterChange();
        } 
    }
    [Parameter]
    public byte? Discount { get => discount;
        set
        {
            if (value < 0)
                return;
            if (value > 100)
                return;
            if (value == discount)
                return;
            discount = value;
            OnParameterChange();
        }
    }
    [Parameter]
    public Action<decimal, byte?>? Action { get; set; }
    [Parameter]
    public EventCallback ResetCallback { get; set; }
    private void OnParameterChange()
    {
        Action?.Invoke(FullPrice, Discount);
    }
    public void Dispose()
    {
        Action = null;
    }
}