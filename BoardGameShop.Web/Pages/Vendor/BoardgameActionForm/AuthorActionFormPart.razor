<div class="row justify-content-center ">
    @if (BoardgameAuthors == null || disabledStyle == null || Authors == null)
    {
        <div class="col-4 justify-content-center">
            <LoadingSpinner />
        </div>
    }
    else
    {

        <div class="col-lg-3 col-sm-12 align-content-center text-end">
            @if (Changed)
            {
                <span class=" bi bi-circle-fill text-success"></span>
            }
            Автори гри :
        </div>
        <div class="col-lg-8 col-sm-12 align-content-center">
            <div class="row">
                @foreach (var mechanic in BoardgameAuthors)
                {
                    <div class="col-2 p-0 align-content-center justify-content-center @borderControl[mechanic.Id]" style="font-size:0.8em; border-radius:25px"
                         @onmouseout="()=> {OnMouseOut(mechanic.Id);StateHasChanged();}"
                         @onmouseover="()=> {OnMouseOver(mechanic.Id); StateHasChanged();}">
                        <button type="button" class="bg-secondary btn-close btn-sm @disabledStyle" style="font-size:0.8em;border-radius:50%"
                                @onclick="()=> Delete_OnClick(mechanic)"></button>
                        <span>@mechanic.Name</span>
                    </div>
                }
            </div>
        </div>
        <div class="col-lg-8 m-1">
            <div class="btn-group">
                @if (Changed)
                {
                    <button type="button" class="btn btn-primary @disabledStyle" @onclick="Reset_OnClick">Відмінити</button>
                }
                else
                {
                    <button type="button" class="btn btn-primary disabled">Відмінити</button>
                }
                <div class="btn-group text-start">
                    @if(Authors.Count > 0)
                    {
                        <button class="btn btn-success dropdown-toggle @disabledStyle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Добавити автора
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-success dropdown-toggle disabled" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Добавити автора
                        </button>
                    }
                    <ul class="dropdown-menu">
                        @foreach (var mechanic in Authors)
                        {
                            <li>
                                <button type="button" class="dropdown-item @disabledStyle"
                                        @onclick="()=> Add_OnClick(mechanic)">
                                    @mechanic.Name
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>

        </div>

    }
</div>

@code {
    [Parameter]
    public bool Changed { get; set; }
    [Parameter]
    public required string disabledStyle { get; set; }
    Dictionary<int, string> borderControl { get; set; } = new();
    string noBorder = "";
    string border = "border border-2 border end";
    [Parameter]
    public required List<AuthorDto> BoardgameAuthors { get; set; }
    [Parameter]
    public required List<AuthorDto> Authors { get; set; }
    [Parameter]
    public EventCallback<AuthorDto> UpdateAuthor { get; set; }
    [Parameter]
    public EventCallback ResetAuthors { get; set; }
    protected override Task OnInitializedAsync()
    {
        SetBorderControl();
        return base.OnInitializedAsync();
    }
    void OnMouseOver(int id)
    {
        borderControl[id] = border;
    }
    void OnMouseOut(int id)
    {
        borderControl[id] = noBorder;
    }
    async void Delete_OnClick(AuthorDto author)
    {
        await UpdateAuthor.InvokeAsync(author);
        borderControl.Remove(author.Id);
        StateHasChanged();
    }
    async void Add_OnClick(AuthorDto author)
    {
        await UpdateAuthor.InvokeAsync(author);
        borderControl.Add(author.Id, noBorder);
        StateHasChanged();
    }
    async void Reset_OnClick()
    {
        await ResetAuthors.InvokeAsync();
        SetBorderControl();
    }
    void SetBorderControl()
    {
        borderControl = new();
        foreach (var author in BoardgameAuthors)
            borderControl.Add(author.Id, noBorder);
    }
}
