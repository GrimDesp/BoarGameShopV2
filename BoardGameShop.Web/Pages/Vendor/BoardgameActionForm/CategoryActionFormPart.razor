<div class="row justify-content-center ">
    @if (BoardgameCategories == null || disabledStyle == null || Categories == null || borderControl.Count != BoardgameCategories.Count)
    {
        <div class="col-4 justify-content-center">
            <LoadingSpinner />
        </div>
    }
    else
    {

            <div class="col-lg-3 col-sm-12 align-content-center text-end">
                @if (Changed)
                {
                    <span class=" bi bi-circle-fill text-success"></span>
                }
                Категорії гри :
            </div>
            <div class="col-lg-8 col-sm-12 align-content-center">
                <div class="row">
                    @foreach (var category in BoardgameCategories)
                    {
                        <div class="col-2 p-0 align-content-center justify-content-center @borderControl[category.Id]" style="font-size:0.8em; border-radius:25px"
                             @onmouseout="()=> {OnMouseOut(category.Id);StateHasChanged();}"
                             @onmouseover="()=> {OnMouseOver(category.Id); StateHasChanged();}">
                            <button type="button" class="bg-secondary btn-close btn-sm @disabledStyle" style="font-size:0.8em;border-radius:50%"
                                    @onclick="()=> DeleteCategory_OnClick(category)"></button>
                            <span>@category.Name</span>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-8 m-1">
                <div class="btn-group">
                    @if(Changed)
                    {
                        <button type="button" class="btn btn-primary @disabledStyle" @onclick="ResetCategory_OnClick">Відмінити</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary disabled">Відмінити</button>
                    }
                    <div class="btn-group text-start">
                        @if(Categories.Count > 0)
                        {
                            <button class="btn btn-success dropdown-toggle @disabledStyle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Добавити категорію
                            </button>
                        }
                        else{
                            <button class="btn btn-success disabled" type="button">
                                Добавити категорію
                            </button>
                        }
                    <ul class="dropdown-menu">
                            @foreach (var category in Categories)
                            {
                                <li>
                                    <button type="button" class="dropdown-item @disabledStyle"
                                            @onclick="()=> AddCategory_OnClick(category)">
                                        @category.Name
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                </div>

        </div>
    
}
</div>

@code {
    [Parameter]
    public bool Changed { get; set; }
    [Parameter]
    public required string disabledStyle { get; set; }
    Dictionary<int, string> borderControl { get; set; } = new();
    string noBorder = "";
    string border = "border border-2 border end";
    [Parameter]
    public required List<CategoryDto> BoardgameCategories { get; set; }
    [Parameter]
    public required List<CategoryDto> Categories { get; set; }
    [Parameter]
    public EventCallback<CategoryDto> AddCategory { get; set; }
    [Parameter]
    public EventCallback<CategoryDto> RemoveCategory { get; set; }
    [Parameter]
    public EventCallback ResetCategories { get; set; }
    protected override Task OnInitializedAsync()
    {
        SetBorderControl();
        return base.OnInitializedAsync();
    }
    void OnMouseOver(int id)
    {
        borderControl[id] = border;
    }
    void OnMouseOut(int id)
    {
        borderControl[id] = noBorder;
    }
    async void DeleteCategory_OnClick(CategoryDto category)
    {
        await RemoveCategory.InvokeAsync(category);
        borderControl.Remove(category.Id);
        StateHasChanged();
    }
    async void AddCategory_OnClick(CategoryDto category)
    {
        await AddCategory.InvokeAsync(category);
        borderControl.Add(category.Id, noBorder);
        StateHasChanged();
    }
    async void ResetCategory_OnClick()
    {
        await ResetCategories.InvokeAsync();
        SetBorderControl();
    }
    void SetBorderControl()
    {
        borderControl = new();
        foreach (var category in BoardgameCategories)
            borderControl.Add(category.Id, noBorder);
    }
}
