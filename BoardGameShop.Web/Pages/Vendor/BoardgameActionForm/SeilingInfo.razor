@implements IDisposable
<div class="row justify-content-center  text-center">
    <div class="col-12">
        <p class="m-1">
            @if (IsChanged)
            {
                <span class=" bi bi-circle-fill text-success"></span>
            }
            Статус товару
            @if (IsChanged)
            {
                <button class="mx-1 @Disabled btn btn-primary" @onclick="ResetCallback">Відмінити</button>
            }
            else
            {
                <button class="mx-1 disabled btn btn-primary">Відмінити</button>
            }
        </p>
    </div>
    <div class="col-3 border-2 border-start   ">
        <div class="m-0 row justify-content-center">
            <span class="col-12">Товару на складі</span>
            <input class=" col-6 form-text" type="number" @bind="@Quantity" />

        </div>
    </div>
    <div class="col-3 border-2 border-start ">
        <span>Статус товару</span>
        <p class="justify-content-center">
            @if(IsDeleted)
            {
                @deletedMessage
                eye = "bi-eye btn-primary ";
            }
            else
            {
                @seiledMessage
                eye = "bi-eye-slash btn-danger";
            }
            <button class=" mx-1 btn bi @eye" @onclick="() => IsDeleted = !IsDeleted" />
        </p>
    </div>
</div>
@code {
    private string eye = string.Empty;
    private string deletedMessage = "Знято з продажу";
    private string seiledMessage = "В продажі";
    private int qty;
    private bool isDeleted;
    [Parameter]
    public int Quantity { get => qty; 
        set
        {
            if (value < 0)
                return;
            if (value == qty)
                return;
            qty = value;
            OnParameterChange();
        }
    }
    [Parameter]
    public bool IsDeleted { get => isDeleted; 
        set
        {
            if (value == isDeleted)
                return;
            isDeleted = value;
            OnParameterChange();
        }
    }
    [Parameter]
    public bool IsChanged { get; set; }
    [Parameter]
    public string Disabled { get; set; } = string.Empty;
    [Parameter]
    public Action<int, bool>? Action { get; set; }
    [Parameter]
    public EventCallback ResetCallback { get; set; }
    private void OnParameterChange()
    {
        Action?.Invoke(Quantity, IsDeleted);
    }
    public void Dispose()
    {
        Action = null;
    }
}